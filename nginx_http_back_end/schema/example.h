////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __example_20180601154915_h__
#define __example_20180601154915_h__

#include "slothjson.h"

namespace slothjson {

struct fxxx_gfw_t
{
    bool bool_val;
    int8_t int8_val;
    int32_t int32_val;
    uint64_t uint64_val;
    double double_val;
    std::string str_val;
    std::vector<int32_t > vec_val;
    std::map<std::string, std::string > dict_val;

    void skip_bool_val() { __skip_bool_val = true; }
    void skip_int8_val() { __skip_int8_val = true; }
    void skip_int32_val() { __skip_int32_val = true; }
    void skip_uint64_val() { __skip_uint64_val = true; }
    void skip_double_val() { __skip_double_val = true; }
    void skip_str_val() { __skip_str_val = true; }
    void skip_vec_val() { __skip_vec_val = true; }
    void skip_dict_val() { __skip_dict_val = true; }

    bool json_has_bool_val() const { return __json_has_bool_val; }
    bool json_has_int8_val() const { return __json_has_int8_val; }
    bool json_has_int32_val() const { return __json_has_int32_val; }
    bool json_has_uint64_val() const { return __json_has_uint64_val; }
    bool json_has_double_val() const { return __json_has_double_val; }
    bool json_has_str_val() const { return __json_has_str_val; }
    bool json_has_vec_val() const { return __json_has_vec_val; }
    bool json_has_dict_val() const { return __json_has_dict_val; }

    fxxx_gfw_t();
    fxxx_gfw_t& operator=(const fxxx_gfw_t& obj_val);
    bool operator==(const fxxx_gfw_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_bool_val;
    bool __skip_int8_val;
    bool __skip_int32_val;
    bool __skip_uint64_val;
    bool __skip_double_val;
    bool __skip_str_val;
    bool __skip_vec_val;
    bool __skip_dict_val;

    bool __json_has_bool_val;
    bool __json_has_int8_val;
    bool __json_has_int32_val;
    bool __json_has_uint64_val;
    bool __json_has_double_val;
    bool __json_has_str_val;
    bool __json_has_vec_val;
    bool __json_has_dict_val;
};

bool encode(const fxxx_gfw_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, fxxx_gfw_t& obj_val);

} // namespace slothjson

#endif // __example_20180601154915_h__