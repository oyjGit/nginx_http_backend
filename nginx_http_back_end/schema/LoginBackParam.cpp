////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "LoginBackParam.h"


CLoginBackParam::CLoginBackParam()
{
    code = 0;
    __skip_code = false;
    __json_has_code = false;

    desc = "default desc value";
    __skip_desc = false;
    __json_has_desc = false;

    __skip_data = false;
    __json_has_data = false;
}

CLoginBackParam& CLoginBackParam::operator=(const CLoginBackParam& obj_val)
{
    this->code = obj_val.code;
    this->desc = obj_val.desc;
    this->data = obj_val.data;
    return *this;
}

bool CLoginBackParam::operator==(const CLoginBackParam& obj_val) const
{
    if (!(this->code == obj_val.code)) return false;
    if (!(this->desc == obj_val.desc)) return false;
    if (!(this->data == obj_val.data)) return false;
    return true;
}

bool CLoginBackParam::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_code && !encode_field(code, "code", alloc, json_val)) break;
        if (!__skip_desc && !encode_field(desc, "desc", alloc, json_val)) break;
        if (!__skip_data && !encode_field(data, "data", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool CLoginBackParam::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "code", code, __json_has_code)) break;
        if (!decode_field(json_val, "desc", desc, __json_has_desc)) break;
        if (!decode_field(json_val, "data", data, __json_has_data)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const CLoginBackParam& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, CLoginBackParam& obj_val)
{
    return obj_val.decode(json_val);
}
