////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "LoginBackParam.h"


LoginBackParam::LoginBackParam()
{
    expire = 0;
    __skip_expire = false;
    __json_has_expire = false;

    __skip_session_id = false;
    __json_has_session_id = false;

    __skip_openid = false;
    __json_has_openid = false;
}

LoginBackParam& LoginBackParam::operator=(const LoginBackParam& obj_val)
{
    this->expire = obj_val.expire;
    this->session_id = obj_val.session_id;
    this->openid = obj_val.openid;
    return *this;
}

bool LoginBackParam::operator==(const LoginBackParam& obj_val) const
{
    if (!(this->expire == obj_val.expire)) return false;
    if (!(this->session_id == obj_val.session_id)) return false;
    if (!(this->openid == obj_val.openid)) return false;
    return true;
}

bool LoginBackParam::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_expire && !encode_field(expire, "expire", alloc, json_val)) break;
        if (!__skip_session_id && !encode_field(session_id, "session_id", alloc, json_val)) break;
        if (!__skip_openid && !encode_field(openid, "openid", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool LoginBackParam::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "expire", expire, __json_has_expire)) break;
        if (!decode_field(json_val, "session_id", session_id, __json_has_session_id)) break;
        if (!decode_field(json_val, "openid", openid, __json_has_openid)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const LoginBackParam& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, LoginBackParam& obj_val)
{
    return obj_val.decode(json_val);
}
