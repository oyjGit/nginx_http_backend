////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "UserInfo.h"


CUserInfo::CUserInfo()
{
    id = -1;
    __skip_id = false;
    __json_has_id = false;

    __skip_name = false;
    __json_has_name = false;

    __skip_nick_name = false;
    __json_has_nick_name = false;

    __skip_phone = false;
    __json_has_phone = false;
}

CUserInfo& CUserInfo::operator=(const CUserInfo& obj_val)
{
    this->id = obj_val.id;
    this->name = obj_val.name;
    this->nick_name = obj_val.nick_name;
    this->phone = obj_val.phone;
    return *this;
}

bool CUserInfo::operator==(const CUserInfo& obj_val) const
{
    if (!(this->id == obj_val.id)) return false;
    if (!(this->name == obj_val.name)) return false;
    if (!(this->nick_name == obj_val.nick_name)) return false;
    if (!(this->phone == obj_val.phone)) return false;
    return true;
}

bool CUserInfo::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_id && !encode_field(id, "id", alloc, json_val)) break;
        if (!__skip_name && !encode_field(name, "name", alloc, json_val)) break;
        if (!__skip_nick_name && !encode_field(nick_name, "nick_name", alloc, json_val)) break;
        if (!__skip_phone && !encode_field(phone, "phone", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool CUserInfo::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "id", id, __json_has_id)) break;
        if (!decode_field(json_val, "name", name, __json_has_name)) break;
        if (!decode_field(json_val, "nick_name", nick_name, __json_has_nick_name)) break;
        if (!decode_field(json_val, "phone", phone, __json_has_phone)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const CUserInfo& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, CUserInfo& obj_val)
{
    return obj_val.decode(json_val);
}
